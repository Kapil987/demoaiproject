# /etc/nginx/sites-available/default

# The 'server' block defines a virtual host.
server {
    # Listen on port 80 for incoming HTTP requests.
    listen 80 default_server;
    listen [::]:80 default_server;

    # Set the server name. The underscore '_' makes this server block
    # a catch-all for any domain or IP address that doesn't match other
    # explicitly defined server_name directives.
    server_name _;

    # Root directory for static files (if you serve any directly via Nginx).
    # For a simple Flask app, you might not need this if all content is dynamic.
    # root /var/www/html;

    # Log files for this server block.
    # Access logs record all requests.
    access_log /var/log/nginx/flask_access.log;
    # Error logs record issues. Set to 'warn' for more verbosity than default 'error'.
    error_log /var/log/nginx/flask_error.log warn;

    # The 'location /' block handles all requests that don't match other specific locations.
    location / {
        # Proxy all requests to the Flask application running on localhost:5000.
        # This is the core of the reverse proxy setup.
        proxy_pass http://127.0.0.1:5000;

        # These directives are important for passing client information to the Flask app.
        # X-Real-IP: Passes the actual client IP address.
        proxy_set_header X-Real-IP $remote_addr;
        # X-Forwarded-For: Appends the client IP to a list of proxies.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # X-Forwarded-Proto: Indicates if the original request was HTTP or HTTPS.
        proxy_set_header X-Forwarded-Proto $scheme;
        # Host: Passes the original Host header from the client.
        proxy_set_header Host $http_host;

        # Prevent Nginx from caching responses from the backend.
        proxy_cache_bypass $http_pragma;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 1;
        proxy_cache_use_stale error timeout updating http_500 http_503 http_404;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404      1m;
        proxy_cache_lock on;
    }

    # Optional: If you have static files (CSS, JS, images) that Nginx should serve directly
    # for better performance, you can add a location block like this.
    # Replace /path/to/your/flask_app/static with the actual path.
    # location /static/ {
    #     alias /path/to/your/flask_app/static/;
    #     expires 30d; # Cache static files in browser for 30 days
    #     access_log off; # No need to log every static file access
    #     log_not_found off; # Don't log 404s for missing static files
    # }

    # Error pages (optional, Nginx can serve custom error pages)
    # error_page 404 /404.html;
    # location = /404.html {
    #     root /usr/share/nginx/html;
    #     internal;
    # }

    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    #     internal;
    # }
}
